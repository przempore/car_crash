cmake_minimum_required(VERSION 3.14 FATAL_ERROR)

# SFML2_DIR
if (NOT SFML2_SOURCE_DIR)
    set(SFML2_SOURCE_DIR ${THIRD_PARTY_SOURCE_DIR}/SFML)
endif ()
message(STATUS "SFML2_SOURCE_DIR=${SFML2_SOURCE_DIR}")

if (NOT SFML2_BINARY_DIR)
    set(SFML2_BINARY_DIR ${THIRD_PARTY_BINARY_DIR}/SFML)
endif ()
message(STATUS "SFML2_BINARY_DIR=${SFML2_BINARY_DIR}")

find_path(SFML2_INCLUDE "SFML/Config.hpp" HINTS ${SFML2_SOURCE_DIR} PATH_SUFFIXES "include" NO_DEFAULT_PATH)
message(STATUS "SFML2_INCLUDE=${SFML2_INCLUDE}")

if (MSVC)
	if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
	    set(LIBRARY_SUFIX "-d.lib")
	else()
	    set(LIBRARY_SUFIX ".lib")
	endif()
else()
	set(LIBRARY_PREFIX "lib")
	if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
	    set(LIBRARY_SUFIX "-d.so")
	else()
	    set(LIBRARY_SUFIX ".so")
	endif()
endif()

set(SFML2_LIBRARIES)
foreach(COMPONENT ${SFML2_FIND_COMPONENTS})
    set(SFML2_COMPONENT_LIBRARY ${LIBRARY_PREFIX}${COMPONENT}${LIBRARY_SUFIX})
    message(STATUS "SFML2_COMPONENT_LIBRARY=${SFML2_COMPONENT_LIBRARY}")
    find_library(SFML2_LIB NAMES ${SFML2_COMPONENT_LIBRARY} HINTS ${SFML2_BINARY_DIR} PATH_SUFFIXES lib PATHS ${SFML2_BINARY_DIR})
    list(APPEND SFML2_LIBRARIES ${SFML2_LIB})
    unset(SFML2_LIB CACHE)
endforeach()

message(STATUS "SFML2_LIBRARIES=${SFML2_LIBRARIES}")

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(SFML2 REQUIRED_VARS
        SFML2_LIBRARIES
        SFML2_INCLUDE
        )
